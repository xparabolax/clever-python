# coding: utf-8

"""
    Clever API

    The Clever API  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from clever.models.district_admin import DistrictAdmin  # noqa: F401,E501


class District(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'district_contact': 'DistrictAdmin',
        'error': 'str',
        'id': 'str',
        'last_sync': 'str',
        'launch_date': 'str',
        'login_methods': 'list[str]',
        'mdr_number': 'str',
        'name': 'str',
        'nces_id': 'str',
        'pause_end': 'str',
        'pause_start': 'str',
        'portal_url': 'str',
        'sis_type': 'str',
        'state': 'str'
    }

    attribute_map = {
        'district_contact': 'district_contact',
        'error': 'error',
        'id': 'id',
        'last_sync': 'last_sync',
        'launch_date': 'launch_date',
        'login_methods': 'login_methods',
        'mdr_number': 'mdr_number',
        'name': 'name',
        'nces_id': 'nces_id',
        'pause_end': 'pause_end',
        'pause_start': 'pause_start',
        'portal_url': 'portal_url',
        'sis_type': 'sis_type',
        'state': 'state'
    }

    def __init__(self, district_contact=None, error=None, id=None, last_sync=None, launch_date=None, login_methods=None, mdr_number=None, name=None, nces_id=None, pause_end=None, pause_start=None, portal_url=None, sis_type=None, state=None):  # noqa: E501
        """District - a model defined in Swagger"""  # noqa: E501

        self._district_contact = None
        self._error = None
        self._id = None
        self._last_sync = None
        self._launch_date = None
        self._login_methods = None
        self._mdr_number = None
        self._name = None
        self._nces_id = None
        self._pause_end = None
        self._pause_start = None
        self._portal_url = None
        self._sis_type = None
        self._state = None
        self.discriminator = None

        if district_contact is not None:
            self.district_contact = district_contact
        if error is not None:
            self.error = error
        if id is not None:
            self.id = id
        if last_sync is not None:
            self.last_sync = last_sync
        if launch_date is not None:
            self.launch_date = launch_date
        if login_methods is not None:
            self.login_methods = login_methods
        if mdr_number is not None:
            self.mdr_number = mdr_number
        if name is not None:
            self.name = name
        if nces_id is not None:
            self.nces_id = nces_id
        if pause_end is not None:
            self.pause_end = pause_end
        if pause_start is not None:
            self.pause_start = pause_start
        if portal_url is not None:
            self.portal_url = portal_url
        if sis_type is not None:
            self.sis_type = sis_type
        if state is not None:
            self.state = state

    @property
    def district_contact(self):
        """Gets the district_contact of this District.  # noqa: E501


        :return: The district_contact of this District.  # noqa: E501
        :rtype: DistrictAdmin
        """
        return self._district_contact

    @district_contact.setter
    def district_contact(self, district_contact):
        """Sets the district_contact of this District.


        :param district_contact: The district_contact of this District.  # noqa: E501
        :type: DistrictAdmin
        """

        self._district_contact = district_contact

    @property
    def error(self):
        """Gets the error of this District.  # noqa: E501


        :return: The error of this District.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this District.


        :param error: The error of this District.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this District.  # noqa: E501


        :return: The id of this District.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this District.


        :param id: The id of this District.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_sync(self):
        """Gets the last_sync of this District.  # noqa: E501


        :return: The last_sync of this District.  # noqa: E501
        :rtype: str
        """
        return self._last_sync

    @last_sync.setter
    def last_sync(self, last_sync):
        """Sets the last_sync of this District.


        :param last_sync: The last_sync of this District.  # noqa: E501
        :type: str
        """

        self._last_sync = last_sync

    @property
    def launch_date(self):
        """Gets the launch_date of this District.  # noqa: E501


        :return: The launch_date of this District.  # noqa: E501
        :rtype: str
        """
        return self._launch_date

    @launch_date.setter
    def launch_date(self, launch_date):
        """Sets the launch_date of this District.


        :param launch_date: The launch_date of this District.  # noqa: E501
        :type: str
        """

        self._launch_date = launch_date

    @property
    def login_methods(self):
        """Gets the login_methods of this District.  # noqa: E501


        :return: The login_methods of this District.  # noqa: E501
        :rtype: list[str]
        """
        return self._login_methods

    @login_methods.setter
    def login_methods(self, login_methods):
        """Sets the login_methods of this District.


        :param login_methods: The login_methods of this District.  # noqa: E501
        :type: list[str]
        """

        self._login_methods = login_methods

    @property
    def mdr_number(self):
        """Gets the mdr_number of this District.  # noqa: E501


        :return: The mdr_number of this District.  # noqa: E501
        :rtype: str
        """
        return self._mdr_number

    @mdr_number.setter
    def mdr_number(self, mdr_number):
        """Sets the mdr_number of this District.


        :param mdr_number: The mdr_number of this District.  # noqa: E501
        :type: str
        """

        self._mdr_number = mdr_number

    @property
    def name(self):
        """Gets the name of this District.  # noqa: E501


        :return: The name of this District.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this District.


        :param name: The name of this District.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nces_id(self):
        """Gets the nces_id of this District.  # noqa: E501


        :return: The nces_id of this District.  # noqa: E501
        :rtype: str
        """
        return self._nces_id

    @nces_id.setter
    def nces_id(self, nces_id):
        """Sets the nces_id of this District.


        :param nces_id: The nces_id of this District.  # noqa: E501
        :type: str
        """

        self._nces_id = nces_id

    @property
    def pause_end(self):
        """Gets the pause_end of this District.  # noqa: E501


        :return: The pause_end of this District.  # noqa: E501
        :rtype: str
        """
        return self._pause_end

    @pause_end.setter
    def pause_end(self, pause_end):
        """Sets the pause_end of this District.


        :param pause_end: The pause_end of this District.  # noqa: E501
        :type: str
        """

        self._pause_end = pause_end

    @property
    def pause_start(self):
        """Gets the pause_start of this District.  # noqa: E501


        :return: The pause_start of this District.  # noqa: E501
        :rtype: str
        """
        return self._pause_start

    @pause_start.setter
    def pause_start(self, pause_start):
        """Sets the pause_start of this District.


        :param pause_start: The pause_start of this District.  # noqa: E501
        :type: str
        """

        self._pause_start = pause_start

    @property
    def portal_url(self):
        """Gets the portal_url of this District.  # noqa: E501


        :return: The portal_url of this District.  # noqa: E501
        :rtype: str
        """
        return self._portal_url

    @portal_url.setter
    def portal_url(self, portal_url):
        """Sets the portal_url of this District.


        :param portal_url: The portal_url of this District.  # noqa: E501
        :type: str
        """

        self._portal_url = portal_url

    @property
    def sis_type(self):
        """Gets the sis_type of this District.  # noqa: E501


        :return: The sis_type of this District.  # noqa: E501
        :rtype: str
        """
        return self._sis_type

    @sis_type.setter
    def sis_type(self, sis_type):
        """Sets the sis_type of this District.


        :param sis_type: The sis_type of this District.  # noqa: E501
        :type: str
        """

        self._sis_type = sis_type

    @property
    def state(self):
        """Gets the state of this District.  # noqa: E501


        :return: The state of this District.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this District.


        :param state: The state of this District.  # noqa: E501
        :type: str
        """
        allowed_values = ["running", "pending", "error", "paused", ""]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(District, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, District):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
